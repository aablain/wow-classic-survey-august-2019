{"version":3,"sources":["filters/data.ts","filters/checkbox.tsx","icons/hide.tsx","icons/show.tsx","filters/filter.tsx","filters/index.tsx","results/bargraph.tsx","utils.js","results/result.tsx","results/index.tsx","AppWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","answers","ageRange","characterGender","class","classComparison","contentInterest","expectedTimeTo60","faction","firstRetailExpansionPlayed","hasActiveSub","hasPlayedPrivateServer","mostRecentExpansionPlayed","prof60","profLeveling","race","region","role","serverType","dailyPlayTime","willTakeTimeOffWork","hasFoundGuild","phaseMostExcitedFor","colors","colorBlindColors","colorsObj","Druid","Hunter","Mage","Paladin","Priest","Rogue","Shaman","Warlock","Warrior","DK","DH","Monk","alt1","alt2","factions","_factions","Object","defineProperty","questions","races","_races","Human","Dwarf","titles","responseDate","Checkbox","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayName","startOnSelect","bind","assertThisInitialized","react","className","style","onClick","backgroundColor","isSelected","isColorBlind","answer","e","onSelect","type","React","hide","_ref","_ref$fill","fill","size","react_default","a","createElement","version","id","x","y","width","height","viewBox","d","show","FilterComp","startScrollTo","startUpdate","_this2","_this$props","idx","selectedAnswers","title","Data","concat","questionIsShowing","map","checkbox_Checkbox","key","toggleAnswer","target","document","querySelector","scrollIntoView","behavior","updateQuestionsShowing","Filters","innerHeight","resetQuestionsShowing","question","filter_FilterComp","questionsShowing","clearFilter","applyFilter","updateColorBlind","transform","BarGraph","getAnswerWidth","value","data-content","color","totalAnswers","toFixed","_callee","callback","_ref2","part1","part2","regenerator_default","wrap","_context","prev","next","Promise","all","res","rej","req","XMLHttpRequest","onFail","event","Error","addEventListener","status","json","JSON","parse","responseText","open","send","sent","slicedToArray","toConsumableArray","stop","objectEntries","obj","entries","keys","Result","state","counts","_getCountsAsArray","answerCounts","getColor","getChartType","renderBarGraph","renderPieChart","prevProps","setState","_this3","length","_ref3","borderColor","bargraph_BarGraph","label","labelPosition","labelStyle","fontSize","dist_default","labelProps","percent","dataIndex","percentage","textAnchor","alignmentBaseline","dx","dy","src_results","filtersLength","activeFilters","computedResponsesLength","allResponsesCount","catIdx","category","catFilters","filter","updateFilterLive","questionKey","result_Result","Wrapper","_calcAnswerQuantities","filtering","window","isMobile","innerWidth","loaded","responses","showFilters","_filterResults","_getAnswersTemplate","toggleAnswerFilter","updateQuestionShowing","reduce","accum","response","forEach","split","subAnswer","_ref4","q","results","item","_x","_getSurveyData","apply","arguments","getSurveyData","error","failedToLoad","filteredResps","timeoutID","clearTimeout","setTimeout","_this4","_getSurveyResults","_this5","removeEventListener","_this6","filters_Filters","_this7","questionsWithFilters","getFilters","computedResponses","getFilteredResponses","_ref5","_ref6","filteredAnswers","_ref7","_ref8","_ref9","filters","every","_ref11","_ref12","some","selectedAnswer","includes","updatedSection","objectSpread","_this8","App","AppWrapper_Wrapper","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7992870d.chunk.js","sourcesContent":["const colors = [\n  \"#C0392B\", // dark-red\n  \"#2980B9\", // dark-blue\n  \"#9B59B6\", // dark-purple\n  \"#D35400\", // dark-orange\n  \"#1E8449\", // Dark Green\n  // \"#D4AC0D\", // Lighter Dark Yellow\n  \"#B7950B\", // Dark Yellow\n  \"#D98880\", // light-red\n  \"#7FB3D5\", // light-blue\n  \"#C39BD3\", // light-purple\n  \"#F0B27A\", // light-orange\n  \"#7DCEA0\", // light-green\n  \"#B3B6B7\" // light-grey\n];\n\nconst colorBlindColors = [\n  \"#154360\",\n  \"#1A5276\",\n  \"#1F618D\",\n  \"#1F618D\",\n  \"#2980B9\",\n  \"#5499C7\",\n  \"#5DADE2\",\n  \"#7FB3D5\",\n  \"#85C1E9\"\n];\n\nconst colorsObj = {\n  Druid: \"#FF7D0A\",\n  Hunter: \"#ABD473\",\n  Mage: \"#40C7EB\",\n  Paladin: \"#F58CBA\",\n  Priest: \"#858585\",\n  Rogue: \"#F1C40F\",\n  Shaman: \"#0070DE\",\n  Warlock: \"#8787ED\",\n  Warrior: \"#C79C6E\",\n  DK: \"#C41F3B\",\n  DH: \"#A330C9\",\n  Monk: \"#00FF96\",\n  alt1: \"tomato\",\n  alt2: \"blanchedalmond\"\n};\n\nconst questions = [\n  \"region\",\n  \"serverType\",\n  \"faction\",\n  \"characterGender\",\n  \"race\",\n  \"class\",\n  \"role\",\n  \"profLeveling\",\n  \"prof60\",\n  \"ageRange\",\n  \"hasActiveSub\",\n  \"firstRetailExpansionPlayed\",\n  \"mostRecentExpansionPlayed\",\n  \"hasPlayedPrivateServer\",\n  \"classComparison\",\n  \"hasFoundGuild\",\n  \"expectedTimeTo60\",\n  \"dailyPlayTime\",\n  \"willTakeTimeOffWork\",\n  \"phaseMostExcitedFor\",\n  \"contentInterest\"\n];\n\nconst titles: { [x: string]: string } = {\n  ageRange: \"What is your age\",\n  characterGender: \"What gender will your character be\",\n  class: \"What class will your character be\",\n  classComparison:\n    \"Will you roll the same class your previous main, or try a new one\",\n  contentInterest: \"What content are you most excited about\",\n  expectedTimeTo60:\n    \"From the launch of Classic, how long do you anticipate it will take you, in real-world-time, to reach level 60\",\n  faction: \"What faction will your character belong to\",\n  firstRetailExpansionPlayed:\n    \"What is the earliest retail World of Warcraft expansion you played\",\n  hasActiveSub: \"Do you have an active World of Warcraft subscription\",\n  hasPlayedPrivateServer:\n    \"Had you played on a Vanilla WoW private server, prior to Classic's announcement\",\n  mostRecentExpansionPlayed:\n    \"What is the most recent retail World of Warcraft expansion you played?\",\n  profLeveling:\n    \"What primary professions will you be using while leveling from 1-60\",\n  prof60: \"What primary professions will you be using at level 60\",\n  race: \"What race will your character be\",\n  region: \"What region will you be playing on\",\n  responseDate: \"Response Timestamp\",\n  role: \"What will the primary role of your character be\",\n  serverType: \"What type of sever will you be playing on\",\n  dailyPlayTime: \"After the first month (post-launch), what do you anticipate your average daily playtime will be\",\n  willTakeTimeOffWork: \"Will you be taking time off work or other obligations for Classic's launch\",\n  hasFoundGuild: \"Have you already found a guild you will join at launch\",\n  phaseMostExcitedFor: \"Which of the six Phases are you most excited to play?\"\n};\n\nexport default {\n  answers: {\n    ageRange: [\"Under 18\", \"18 - 24\", \"25 - 34\", \"35 - 44\", \"44 - 55\", \"55+\"],\n    characterGender: [\"Male\", \"Female\"],\n    class: [\n      \"Shaman\",\n      \"Rogue\",\n      \"Priest\",\n      \"Warrior\",\n      \"Paladin\",\n      \"Mage\",\n      \"Warlock\",\n      \"Hunter\",\n      \"Druid\"\n    ],\n    classComparison: [\n      \"I will be rolling the same class as my previous main\",\n      \"I will be rolling a class I have played extensively, but did not main\",\n      \"I will be rolling a new class, or one that I played minimally\"\n    ],\n    contentInterest: [\n      \"Questing\",\n      \"Dungeons\",\n      \"World PvP\",\n      \"Battlegrounds\",\n      \"Raids\",\n      \"Role Playing\",\n      \"Collecting items/recipes/wealth\",\n      \"Barrens Chat\"\n    ],\n    expectedTimeTo60: [\n      \"< 1 week\",\n      \"1 - 2 weeks\",\n      \"2 - 4 weeks\",\n      \"1 - 2 months\",\n      \"2 - 4 months\",\n      \"4 - 6 months\",\n      \"6+ months\"\n    ],\n    faction: [\"For the Horde!\", \"For the Alliance!\"],\n    firstRetailExpansionPlayed: [\n      \"Vanilla\",\n      \"The Burning Crusade\",\n      \"Wrath of the Lich King\",\n      \"Cataclysm\",\n      \"Mists of Pandaria\",\n      \"Warlords of Draenor\",\n      \"Legion\",\n      \"Battle for Azeroth\"\n    ],\n    hasActiveSub: [\"Yes\", \"No\"],\n    hasPlayedPrivateServer: [\"Yes\", \"No\"],\n    mostRecentExpansionPlayed: [\n      \"Vanilla\",\n      \"The Burning Crusade\",\n      \"Wrath of the Lich King\",\n      \"Cataclysm\",\n      \"Mists of Pandaria\",\n      \"Warlords of Draenor\",\n      \"Legion\",\n      \"Battle for Azeroth\"\n    ],\n    prof60: [\n      \"Alchemy\",\n      \"Blacksmithing\",\n      \"Enchanting\",\n      \"Engineering\",\n      \"Herbalism\",\n      \"Leatherworking\",\n      \"Mining\",\n      \"Skinning\",\n      \"Tailoring\"\n    ],\n    profLeveling: [\n      \"Alchemy\",\n      \"Blacksmithing\",\n      \"Enchanting\",\n      \"Engineering\",\n      \"Herbalism\",\n      \"Leatherworking\",\n      \"Mining\",\n      \"Skinning\",\n      \"Tailoring\"\n    ],\n    race: [\n      \"Human\",\n      \"Dwarf\",\n      \"Night Elf\",\n      \"Gnome\",\n      \"Orc\",\n      \"Undead\",\n      \"Tauren\",\n      \"Troll\"\n    ],\n    region: [\"Americas\", \"Oceanic\", \"Europe\", \"Asia\"],\n    role: [\"DPS\", \"Healer\", \"Tank\"],\n    serverType: [\"PvP\", \"PvE\", \"RP\", /*\"RP-PvP\"*/],\n    dailyPlayTime: [\"1 - 2 hours\", \"3 - 4 hours\", \"5 - 6 hours\", \"7 - 8 hours\", \"9 - 10 hours\", \"11 - 12 hours\", \"12+ hours\"],\n    willTakeTimeOffWork: [\"Yes, I have taken a week or more off for Classic's launch\", \"I have no other obligations\", \"No, I do not plan to take time off\"],\n    hasFoundGuild: [\"Yes\", \"No, and I am not currently looking\", \"No, though I am currently looking\"],\n    phaseMostExcitedFor: [\"Phase 1\", \"Phase 2\", \"Phase 3\", \"Phase 4\", \"Phase 5\", \"Phase 6\"]\n  },\n  colors,\n  colorBlindColors,\n  colorsObj,\n  factions: {\n    [\"For the Horde!\"]: {\n      Shaman: true,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: true,\n      Hunter: true,\n      Druid: true\n    },\n    [\"For the Alliance!\"]: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: true,\n      Mage: true,\n      Warlock: true,\n      Hunter: true,\n      Druid: true\n    }\n  },\n  questions,\n  races: {\n    Human: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: true,\n      Mage: true,\n      Warlock: true,\n      Hunter: false,\n      Druid: false\n    },\n    Dwarf: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: true,\n      Mage: false,\n      Warlock: false,\n      Hunter: true,\n      Druid: true\n    },\n    [\"Night Elf\"]: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: false,\n      Warlock: false,\n      Hunter: true,\n      Druid: true\n    },\n    Gnome: {\n      Shaman: false,\n      Rogue: true,\n      Priest: false,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: true,\n      Hunter: false,\n      Druid: false\n    },\n    Orc: {\n      Shaman: true,\n      Rogue: true,\n      Priest: false,\n      Warrior: true,\n      Paladin: false,\n      Mage: false,\n      Warlock: true,\n      Hunter: true,\n      Druid: false\n    },\n    Undead: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: true,\n      Hunter: false,\n      Druid: false\n    },\n    Tauren: {\n      Shaman: true,\n      Rogue: false,\n      Priest: false,\n      Warrior: true,\n      Paladin: false,\n      Mage: false,\n      Warlock: false,\n      Hunter: true,\n      Druid: true\n    },\n    Troll: {\n      Shaman: true,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: false,\n      Hunter: true,\n      Druid: false\n    }\n  },\n  titles\n};\n","import * as React from \"react\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  answer: string;\n  isSelected?: boolean;\n  isColorBlind: boolean;\n  onSelect: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  style?: React.CSSProperties;\n  type: keyof Survey.Response;\n}\n\ninterface State {}\n\nexport default class Checkbox extends React.Component<Props> {\n  public displayName = \"Checkbox\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.startOnSelect = this.startOnSelect.bind(this);\n  }\n\n  public render() {\n    return (\n      <div className=\"filters-filter-checkbox-cont\" style={this.props.style}>\n        <button\n          className=\"filters-filter-checkbox\"\n          onClick={this.startOnSelect}\n          style={{\n            backgroundColor: this.props.isSelected\n              ? this.props.isColorBlind\n                ? \"#1F618D\"\n                : \"#F1C40F\"\n              : \"transparent\"\n          }}\n        />\n\n        <label\n          className=\"filters-filter-checkbox-answer-text\"\n          role=\"button\"\n          onClick={this.startOnSelect}\n        >\n          {this.props.answer}\n        </label>\n      </div>\n    );\n  }\n\n  startOnSelect(\n    e:\n      | React.SyntheticEvent<HTMLButtonElement>\n      | React.MouseEvent<HTMLLabelElement, MouseEvent>\n  ) {\n    this.props.onSelect(\n      this.props.answer,\n      !!this.props.isSelected,\n      this.props.type\n    );\n  }\n}\n","import React from \"react\";\n\ninterface Props {\n  fill?: string;\n  size: number;\n}\n\nexport default ({ fill = \"black\", size }: Props) => {\n  return (\n    <svg\n      version=\"1.1\"\n      id=\"Capa_1\"\n      x=\"0px\"\n      y=\"0px\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 59.049 59.049\"\n      fill={fill}\n    >\n      <g>\n        <path\n          d=\"M11.285,41.39c0.184,0.146,0.404,0.218,0.623,0.218c0.294,0,0.585-0.129,0.783-0.377c0.344-0.432,0.273-1.061-0.159-1.405\n\t\tc-0.801-0.638-1.577-1.331-2.305-2.06l-7.398-7.398l7.629-7.629c7.334-7.333,18.003-9.836,27.839-6.534\n\t\tc0.523,0.173,1.09-0.107,1.267-0.63c0.175-0.523-0.106-1.091-0.63-1.267c-10.562-3.545-22.016-0.857-29.89,7.016L0,30.368\n\t\tl8.812,8.812C9.593,39.962,10.426,40.705,11.285,41.39z\"\n        />\n        <path\n          d=\"M50.237,21.325c-1.348-1.348-2.826-2.564-4.394-3.616c-0.458-0.307-1.081-0.185-1.388,0.273\n\t\tc-0.308,0.458-0.185,1.08,0.273,1.388c1.46,0.979,2.838,2.113,4.094,3.369l7.398,7.398l-7.629,7.629\n\t\tc-7.385,7.385-18.513,9.882-28.352,6.356c-0.52-0.187-1.093,0.084-1.279,0.604c-0.186,0.52,0.084,1.092,0.604,1.279\n\t\tc3.182,1.14,6.49,1.693,9.776,1.693c7.621,0,15.124-2.977,20.665-8.518l9.043-9.043L50.237,21.325z\"\n        />\n        <path\n          d=\"M30.539,41.774c-2.153,0-4.251-0.598-6.07-1.73c-0.467-0.29-1.084-0.148-1.377,0.321c-0.292,0.469-0.148,1.085,0.321,1.377\n\t\tc2.135,1.33,4.6,2.032,7.126,2.032c7.444,0,13.5-6.056,13.5-13.5c0-2.685-0.787-5.279-2.275-7.502\n\t\tc-0.308-0.459-0.93-0.582-1.387-0.275c-0.459,0.308-0.582,0.929-0.275,1.387c1.267,1.893,1.937,4.102,1.937,6.39\n\t\tC42.039,36.616,36.88,41.774,30.539,41.774z\"\n        />\n        <path\n          d=\"M30.539,18.774c2.065,0,4.089,0.553,5.855,1.6c0.474,0.281,1.088,0.125,1.37-0.351c0.281-0.475,0.125-1.088-0.351-1.37\n\t\tc-2.074-1.229-4.451-1.879-6.875-1.879c-7.444,0-13.5,6.056-13.5,13.5c0,2.084,0.462,4.083,1.374,5.941\n\t\tc0.174,0.354,0.529,0.56,0.899,0.56c0.147,0,0.298-0.033,0.439-0.102c0.496-0.244,0.701-0.843,0.458-1.338\n\t\tc-0.776-1.582-1.17-3.284-1.17-5.06C19.039,23.933,24.198,18.774,30.539,18.774z\"\n        />\n        <path\n          d=\"M54.621,5.567c-0.391-0.391-1.023-0.391-1.414,0l-46.5,46.5c-0.391,0.391-0.391,1.023,0,1.414\n\t\tc0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293l46.5-46.5C55.012,6.591,55.012,5.958,54.621,5.567z\"\n        />\n      </g>\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n    </svg>\n  );\n};\n","import React from \"react\";\n\ninterface Props {\n  fill?: string;\n  size: number;\n}\n\nexport default ({ fill = \"black\", size }: Props) => {\n  return (\n    <svg\n      version=\"1.1\"\n      id=\"Capa_1\"\n      x=\"0px\"\n      y=\"0px\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 59.2 59.2\"\n      fill={fill}\n    >\n      <g>\n        <path\n          d=\"M51.062,21.561c-11.889-11.889-31.232-11.889-43.121,0L0,29.501l8.138,8.138c5.944,5.944,13.752,8.917,21.561,8.917\n                s15.616-2.972,21.561-8.917l7.941-7.941L51.062,21.561z M49.845,36.225c-11.109,11.108-29.184,11.108-40.293,0l-6.724-6.724\n                l6.527-6.527c11.109-11.108,29.184-11.108,40.293,0l6.724,6.724L49.845,36.225z\"\n        />\n        <path\n          d=\"M28.572,21.57c-3.86,0-7,3.14-7,7c0,0.552,0.448,1,1,1s1-0.448,1-1c0-2.757,2.243-5,5-5c0.552,0,1-0.448,1-1\n                S29.125,21.57,28.572,21.57z\"\n        />\n        <path\n          d=\"M29.572,16.57c-7.168,0-13,5.832-13,13s5.832,13,13,13s13-5.832,13-13S36.741,16.57,29.572,16.57z M29.572,40.57\n                c-6.065,0-11-4.935-11-11s4.935-11,11-11s11,4.935,11,11S35.638,40.57,29.572,40.57z\"\n        />\n      </g>\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n    </svg>\n  );\n};\n","import * as React from \"react\";\nimport Data from \"./data\";\nimport Checkbox from \"./checkbox\";\nimport { Survey } from \"../typings\";\n\nimport HideIcon from \"../icons/hide\";\nimport ShowIcon from \"../icons/show\";\n\ninterface Props {\n  idx: number;\n  isColorBlind: boolean;\n  questionIsShowing: boolean;\n  selectedAnswers: {\n    [x: string]: boolean;\n  };\n  toggleAnswer: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  type: keyof Survey.Response;\n  updateQuestionsShowing: (question: string) => void;\n}\n\ninterface State {}\n\nexport default class FilterComp extends React.Component<Props, State> {\n  public displayName = \"FilterComp\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.startScrollTo = this.startScrollTo.bind(this)\n    this.startUpdate = this.startUpdate.bind(this);\n  }\n\n  render() {\n    const { idx, selectedAnswers, type } = this.props;\n    const title = Data.titles[type];\n    const answers = (Data.answers as { [x: string]: string[] })[type];\n\n    return (\n      <div className=\"filters-filter-cont\">\n        <h4 className=\"filters-filter-title\">\n          <span\n            className={`filters-filter-title-text${\n              this.props.questionIsShowing ? \"\" : \" is-not-showing\"\n            }`}\n            role=\"button\"\n            onClick={() => this.startScrollTo(type)}\n          >\n            {idx}. {title}?{\" \"}\n          </span>\n          <button\n            className=\"filters-filter-title-showing-button\"\n            onClick={this.startUpdate}\n          >\n            {this.props.questionIsShowing ? (\n              <ShowIcon fill=\"black\" size={16} />\n            ) : (\n              <HideIcon fill=\"black\" size={16} />\n            )}\n          </button>\n        </h4>\n\n        {answers &&\n          answers.map((answer: string) => (\n            <Checkbox\n              answer={answer}\n              isColorBlind={this.props.isColorBlind}\n              isSelected={!!selectedAnswers[answer]}\n              key={answer}\n              onSelect={this.props.toggleAnswer}\n              type={this.props.type}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  startScrollTo(key: keyof Survey.Response) {\n    if (key) {\n      const target = document.querySelector(`#${key}`);\n\n      if (target) {\n        target.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  }\n\n  startUpdate() {\n    this.props.updateQuestionsShowing(this.props.type);\n  }\n}\n","import * as React from \"react\";\nimport Data from \"./data\";\nimport Filter from \"./filter\";\nimport { FilterTypes, Survey } from \"../typings\";\nimport Checkbox from \"./checkbox\";\n\nimport \"./styles.scss\";\n\ninterface Props {\n  applyFilter: () => void;\n  clearFilter: () => void;\n  innerHeight: number;\n  isColorBlind: boolean;\n  questionsShowing: FilterTypes.QuestionsShowing;\n  resetQuestionsShowing: () => void;\n  selectedAnswers: FilterTypes.SelectedAnswers;\n  toggleAnswer: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  updateColorBlind: () => void;\n  updateQuestionsShowing: (question: string) => void;\n}\n\ninterface State {}\n\nexport default class Filters extends React.Component<Props, State> {\n  public displayName = \"Filters\";\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <div\n        className=\"filters-main-cont\"\n        style={{ height: this.props.innerHeight }}\n      >\n        <h2 className=\"filters-title\">\n          Filters{\" \"}\n          <button\n            className=\"filters-title-reset-button\"\n            onClick={this.props.resetQuestionsShowing}\n          >\n            Reset Results Showing\n          </button>\n        </h2>\n\n        <div className=\"filters-filters-cont\">\n          {Data.questions.map((question, idx) => (\n            <Filter\n              idx={idx + 1}\n              isColorBlind={this.props.isColorBlind}\n              key={question}\n              questionIsShowing={\n                this.props.questionsShowing[\n                  question as keyof FilterTypes.QuestionsShowing\n                ]\n              }\n              selectedAnswers={\n                this.props.selectedAnswers[\n                  question as keyof FilterTypes.SelectedAnswers\n                ]\n              }\n              type={question as keyof Survey.Response}\n              toggleAnswer={this.props.toggleAnswer}\n              updateQuestionsShowing={this.props.updateQuestionsShowing}\n            />\n          ))}\n        </div>\n        <div className=\"filter-button-cont\">\n          <button\n            className=\"filter-button-clear\"\n            onClick={this.props.clearFilter}\n          >\n            Clear\n          </button>\n          <button className=\"filter-button\" onClick={this.props.applyFilter}>\n            Apply Filter\n          </button>\n          <Checkbox\n            isSelected={this.props.isColorBlind}\n            isColorBlind={true}\n            answer=\"I'm colorblind\"\n            onSelect={(\n              answer: string,\n              isSelected: boolean,\n              type: keyof Survey.Response\n            ) => this.props.updateColorBlind()}\n            style={{ transform: \"scale(0.7)\" }}\n            type={\"expectedTimeTo60\"}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport \"./bargraph.scss\";\n\ninterface Props {\n  answers: { color: string; title: string; value: number }[];\n  totalAnswers: number;\n}\n\ninterface State {}\n\nexport default class BarGraph extends React.Component<Props> {\n  public displayName = \"BarGraph\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.getAnswerWidth = this.getAnswerWidth.bind(this);\n  }\n\n  public render() {\n    return (\n      <div className=\"bar-graph\">\n        {this.props.answers &&\n          this.props.answers.map(\n            answer =>\n              !!answer.value && (\n                <p\n                  className=\"answer-bar\"\n                  data-content={`${answer.title}: ${\n                    answer.value\n                  } (${this.getAnswerWidth(answer)}%)`}\n                  key={answer.title}\n                  style={{\n                    width: `${this.getAnswerWidth(answer)}%`,\n                    backgroundColor: answer.color\n                  }}\n                />\n              )\n          )}\n        <p className=\"bar-graph-range\">\n          <span>0</span>\n          <span>{this.props.totalAnswers}</span>\n        </p>\n      </div>\n    );\n  }\n\n  getAnswerWidth(answer: { color: string; title: string; value: number }) {\n    return ((answer.value / this.props.totalAnswers) * 100).toFixed(2);\n  }\n}\n","\nexport async function getSurveyData(callback) {\n  const [part1, part2] = await Promise.all([\n    getSurveyDataPart1(),\n    getSurveyDataPart2()\n  ]);\n\n  callback(null, [...part1, ...part2]);\n}\n\nfunction getSurveyDataPart1() {\n  return new Promise((res, rej) => {\n    var req = new XMLHttpRequest();\n\n    req.addEventListener(\"load\", onDataLoaded);\n    req.addEventListener(\"error\", onFail);\n    req.addEventListener(\"abort\", onFail);\n\n    req.open(\n      \"GET\",\n      \"https://aablain.github.io/classic-survey-results-august-2019/classic-survey-results-august-2019-part-1.json\"\n    );\n    req.send();\n\n    function onDataLoaded(event) {\n      if (req.status >= 400) {\n        onFail(event);\n      } else {\n        var json = JSON.parse(this.responseText);\n        res(json);\n      }\n    }\n\n    function onFail(event) {\n      rej(new Error(\"...\"));\n    }\n  });\n}\n\nexport function getSurveyDataPart2() {\n  return new Promise((res, rej) => {\n    var req = new XMLHttpRequest();\n\n    req.addEventListener(\"load\", onDataLoaded);\n    req.addEventListener(\"error\", onFail);\n    req.addEventListener(\"abort\", onFail);\n\n    req.open(\n      \"GET\",\n      \"https://aablain.github.io/classic-survey-results-august-2019/classic-survey-results-august-2019-part-2.json\"\n    );\n    req.send();\n\n    function onDataLoaded(event) {\n      if (req.status >= 400) {\n        onFail(event);\n      } else {\n        var json = JSON.parse(this.responseText);\n        res(json);\n      }\n    }\n\n    function onFail(event) {\n      rej(new Error(\"...\"));\n    }\n  });\n}\n\nexport function objectEntries(obj) {\n  return Object.entries\n    ? Object.entries(obj)\n    : Object.keys(obj).map(key => [key, obj[key]]);\n}\n","import * as React from \"react\";\nimport PieChart from \"react-minimal-pie-chart\";\nimport BarGraph from \"./bargraph\";\nimport { objectEntries } from \"../utils\";\nimport Data from \"../filters/data\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  idx: number;\n  isColorBlind: boolean;\n  answerCounts: {\n    [x: string]: number;\n  };\n  question: keyof Survey.Response;\n  totalAnswers: number;\n}\n\ninterface State {\n  counts: {\n    title: string;\n    value: number;\n    color: string;\n  }[];\n  countsArr?: [string, number][];\n}\n\nexport default class Result extends React.Component<Props, State> {\n  public displayName = \"Result\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      counts: this._getCountsAsArray(props.answerCounts)\n      //   countsArr: this._getCountsAssARrayofArrays(props.answerCounts)\n    };\n\n    this.getColor = this.getColor.bind(this);\n    this.getChartType = this.getChartType.bind(this);\n    this.renderBarGraph = this.renderBarGraph.bind(this);\n    this.renderPieChart = this.renderPieChart.bind(this);\n  }\n\n  _getCountsAsArray(answerCounts: {\n    [x: string]: number;\n  }): {\n    title: string;\n    value: number;\n    color: string;\n  }[] {\n    return (objectEntries(answerCounts) as [string, number][]).map(\n      ([key, value], idx) => ({\n        title: key,\n        value,\n        color: this.getColor(idx, key)\n      })\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.answerCounts !== prevProps.answerCounts ||\n      this.props.isColorBlind !== prevProps.isColorBlind\n    ) {\n      this.setState({\n        counts: this._getCountsAsArray(this.props.answerCounts)\n      });\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"result-cont\" id={this.props.question}>\n        <h4 className=\"result-title\">{Data.titles[this.props.question]}?</h4>\n        <div className=\"info-cont\">\n          {this.getChartType() === \"BarChart\"\n            ? this.renderBarGraph()\n            : this.renderPieChart()}\n\n          <ul className=\"stats-list-cont\">\n            {!!this.state.counts.length &&\n              this.state.counts.map(({ color, title, value }) => (\n                <li\n                  className={`result-text${!value ? \" none-match\" : \"\"}`}\n                  key={title}\n                  style={{\n                    color\n                    // textDecoration: !value ? \"line-through\" : \"\"\n                  }}\n                >\n                  <span className=\"result-text-title\">{title || \"(No Answer)\"}:</span>{\" \"}\n                  <span className=\"result-text-value\">\n                    {value} -{\" \"}\n                    <span\n                      className=\"result-text-value-percentage\"\n                      style={{\n                        borderColor: color\n                        // backgroundColor: color\n                      }}\n                    >\n                      {((value / this.props.totalAnswers) * 100).toFixed(2)}%\n                    </span>\n                  </span>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  getColor(idx: number, key: string): string {\n    if (this.props.isColorBlind) {\n      return Data.colorBlindColors[idx];\n    }\n\n    return this.props.question === \"class\"\n      ? (Data.colorsObj as { [x: string]: string })[key]\n      : Data.colors[idx];\n  }\n\n  getChartType(): \"PieChart\" | \"BarChart\" {\n    switch (this.props.question) {\n      case \"prof60\":\n      case \"profLeveling\":\n      case \"contentInterest\":\n        return \"BarChart\";\n      default:\n        return \"PieChart\";\n    }\n  }\n\n  renderBarGraph() {\n    return (\n      <BarGraph\n        answers={this.state.counts}\n        totalAnswers={this.props.totalAnswers}\n      />\n    );\n  }\n\n  renderPieChart() {\n    const props = {\n      data: this.state.counts,\n      label: label,\n      labelPosition: 114,\n      labelStyle: {\n        fontSize: \"8x\"\n      }\n    };\n\n    // @ts-ignore\n    return <PieChart {...props} />;\n  }\n}\n\nconst label = (labelProps: {\n  dx: number;\n  dy: number;\n  data: { color: string; percentage: number }[];\n  dataIndex: number;\n  key: string;\n  textAnchor: string;\n  x: number;\n  y: number;\n}) => {\n  const percent = labelProps.data[labelProps.dataIndex].percentage;\n  return (\n    <text\n      className=\"chart-result-percent\"\n      textAnchor={labelProps.textAnchor}\n      alignmentBaseline=\"middle\"\n      dx={labelProps.dx}\n      dy={labelProps.dy}\n      fill={labelProps.data[labelProps.dataIndex].color}\n      key={labelProps.key}\n      x={labelProps.x}\n      y={labelProps.y}\n    >\n      {percent ? `${percent.toFixed(2)}%` : \"\"}\n    </text>\n  );\n};\n","import * as React from \"react\";\nimport Data from \"../filters/data\";\nimport Result from \"./result\";\nimport { FilterTypes, Survey } from \"../typings\";\n\nimport \"./styles.scss\";\nimport data from \"../filters/data\";\n\ninterface Props {\n  activeFilters?: [keyof Survey.Response, Survey.AllAnswers[]][];\n  answerCounts: FilterTypes.AnswersCounts;\n  computedResponsesLength: number;\n  allResponsesCount: number;\n  innerHeight: number;\n  isColorBlind: boolean;\n  questionsShowing: FilterTypes.QuestionsShowing;\n  updateFilterLive: (category: keyof Survey.Response, filter: string) => void;\n}\n\nexport default (props: Props) => {\n  const filtersLength = !!props.activeFilters ? props.activeFilters.length : 0;\n\n  return (\n    <div className=\"results-main-cont\" style={{ height: props.innerHeight }}>\n      <h1 className=\"results-title\">Results</h1>\n      <h3 className=\"results-subtitle\">\n        {props.computedResponsesLength} Responses match your filters,\n        Representing{\" \"}\n        {(\n          (props.computedResponsesLength / props.allResponsesCount) *\n          100\n        ).toFixed(2)}\n        % of respondees\n      </h3>\n      {props.activeFilters && !!props.activeFilters.length && (\n        <p>\n          Filtering for{\" \"}\n          {props.activeFilters.map(([category, catFilters], catIdx) => {\n            return (\n              <React.Fragment key={category}>\n                <span\n                  style={{\n                    color: props.isColorBlind\n                      ? data.colorBlindColors[catIdx]\n                      : data.colors[catIdx]\n                  }}\n                >\n                  {catFilters.map((filter, idx) => <React.Fragment key={filter}>{\" \"}<span className=\"results-subtitle-filter-opt\" style={{\n                    backgroundColor: props.isColorBlind\n                      ? data.colorBlindColors[catIdx]\n                      : data.colors[catIdx]\n                  }}>{filter} <span className=\"results-subtitle-filter-remove-btn\" role=\"button\" onClick={() => props.updateFilterLive(category, filter)}>x</span></span></React.Fragment>\n                  )}{\" \"}\n                </span>{\" \"}\n                {catIdx + 1 !== filtersLength ? \" and \" : \"\"}\n              </React.Fragment>\n            );\n          })}\n        </p>\n      )}\n      <div className=\"results-results-cont\">\n        {Data.questions.map((questionKey, idx) =>\n          props.questionsShowing[\n            questionKey as keyof FilterTypes.QuestionsShowing\n          ] ? (\n            <Result\n              idx={idx}\n              isColorBlind={props.isColorBlind}\n              key={questionKey}\n              question={questionKey as keyof Survey.Response}\n              answerCounts={\n                props.answerCounts[questionKey as keyof Survey.Response]\n              }\n              totalAnswers={props.computedResponsesLength}\n            />\n          ) : (\n            <span key={questionKey} />\n          )\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport Filters from \"./filters/\";\nimport Results from \"./results/\";\nimport Data from \"./filters/data\";\nimport { FilterTypes, Survey } from \"./typings\";\nimport { getSurveyData, objectEntries } from \"./utils\";\n\ninterface Props {}\n\ninterface State {\n  activeFilters?: [keyof Survey.Response, Survey.AllAnswers[]][];\n  answerCounts: FilterTypes.AnswersCounts;\n  answers: FilterTypes.SelectedAnswers;\n  computedResponsesLength: number;\n  failedToLoad?: boolean;\n  filtering: boolean;\n  innerHeight: number;\n  isMobile: boolean;\n  isColorBlind: boolean;\n  loaded: boolean;\n  questionsShowing: FilterTypes.QuestionsShowing;\n  responses: Survey.Response[];\n  showFilters: boolean;\n}\n\nexport default class Wrapper extends React.Component<Props, State> {\n  public displayName = \"Wrapper\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      answers: {\n        ageRange: {},\n        characterGender: {},\n        class: {},\n        classComparison: {},\n        contentInterest: {},\n        expectedTimeTo60: {},\n        faction: {},\n        firstRetailExpansionPlayed: {},\n        hasActiveSub: {},\n        hasPlayedPrivateServer: {},\n        mostRecentExpansionPlayed: {},\n        prof60: {},\n        profLeveling: {},\n        race: {},\n        region: {},\n        role: {},\n        serverType: {},\n        dailyPlayTime: {},\n        willTakeTimeOffWork: {},\n        hasFoundGuild: {},\n        phaseMostExcitedFor: {}\n      },\n      answerCounts: this._calcAnswerQuantities([]),\n      computedResponsesLength: 0,\n      filtering: false,\n      innerHeight: window.innerHeight,\n      isMobile: window.innerWidth < 480,\n      isColorBlind: false,\n      loaded: false,\n      questionsShowing: {\n        ageRange: true,\n        characterGender: true,\n        class: true,\n        classComparison: true,\n        contentInterest: true,\n        expectedTimeTo60: true,\n        faction: true,\n        firstRetailExpansionPlayed: true,\n        hasActiveSub: true,\n        hasPlayedPrivateServer: true,\n        mostRecentExpansionPlayed: true,\n        prof60: true,\n        profLeveling: true,\n        race: true,\n        region: true,\n        dailyPlayTime: true,\n        willTakeTimeOffWork: true,\n        hasFoundGuild: true,\n        role: true,\n        serverType: true,\n        phaseMostExcitedFor: true\n      },\n      responses: [],\n      showFilters: window.innerWidth > 480\n    };\n\n    this._calcAnswerQuantities = this._calcAnswerQuantities.bind(this);\n    this._filterResults = this._filterResults.bind(this);\n    this._getAnswersTemplate = this._getAnswersTemplate.bind(this);\n    this.applyFilter = this.applyFilter.bind(this);\n    this.clearFilter = this.clearFilter.bind(this);\n    this.resetQuestionsShowing = this.resetQuestionsShowing.bind(this);\n    this.toggleAnswerFilter = this.toggleAnswerFilter.bind(this);\n    this.updateQuestionShowing = this.updateQuestionShowing.bind(this);\n    this.updateFilterLive = this.updateFilterLive.bind(this)\n  }\n\n  _calcAnswerQuantities(responses: Survey.Response[]) {\n    const answerCounts = responses.reduce((accum, response) => {\n      const respAsArray = objectEntries(response);\n\n      respAsArray.forEach(([questionKey, answer]: string[]) => {\n        if (questionKey === \"responseDate\") {\n          return accum;\n        }\n        if (\n          questionKey === \"prof60\" ||\n          questionKey === \"profLeveling\" ||\n          questionKey === \"contentInterest\"\n        ) {\n          const subAnswers = answer.split(\", \");\n\n          subAnswers.forEach(subAnswer => {\n            if (!accum[questionKey as keyof Survey.Response][subAnswer]) {\n              accum[questionKey as keyof Survey.Response][subAnswer] = 1;\n            } else {\n              accum[questionKey as keyof Survey.Response][subAnswer]++;\n            }\n          });\n        } else {\n          if (!accum[questionKey as keyof Survey.Response][answer]) {\n            accum[questionKey as keyof Survey.Response][answer] = 1;\n          } else {\n            accum[questionKey as keyof Survey.Response][answer]++;\n          }\n        }\n\n        return accum;\n      });\n\n      return accum;\n    }, this._getAnswersTemplate());\n\n    return answerCounts;\n  }\n\n  _getAnswersTemplate() {\n    return objectEntries(Data.answers).reduce(\n      (accum, [q, answers]) => {\n        accum[q as keyof FilterTypes.AnswersCounts] = {};\n        answers.forEach((a: string) => {\n          accum[q as keyof FilterTypes.AnswersCounts][a] = 0;\n        });\n        return accum;\n      },\n      {} as FilterTypes.AnswersCounts\n    );\n  }\n\n  _filterResults(results: Survey.Response[]) {\n    return results.filter(\n      item =>\n        Data.factions[item.faction][item.class] &&\n        Data.races[item.race][item.class]\n    );\n  }\n\n  _getSurveyResults() {\n    getSurveyData((error: Error | null, responses: Survey.Response[]) => {\n      if (error) {\n        this.setState({ failedToLoad: true });\n        return;\n      }\n\n      const filteredResps = this._filterResults(responses);\n\n      const answerCounts = this._calcAnswerQuantities(filteredResps);\n      this.setState({\n        answerCounts,\n        computedResponsesLength: filteredResps.length,\n        responses: filteredResps,\n        loaded: true\n      });\n    });\n  }\n\n  _setHeight() {\n    // @ts-ignore\n    if (this.timeoutID) {\n      // @ts-ignore\n      clearTimeout(this.timeoutID);\n    }\n\n    // @ts-ignore\n    this.timeoutID = setTimeout(() => {\n      this.setState({ innerHeight: window.innerHeight });\n    }, 300);\n  }\n\n  componentDidMount() {\n    this._getSurveyResults();\n    window.addEventListener(\"resize\", () =>\n      this.setState({ innerHeight: window.innerHeight })\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () =>\n      this.setState({ innerHeight: window.innerHeight })\n    );\n  }\n\n  public render() {\n    if (this.state.failedToLoad) {\n      return (\n        <div className=\"main-wrapper\">Survey Results Failed to load :(</div>\n      );\n    }\n\n    if (!this.state.loaded) {\n      return (\n        <div className=\"loading-cont \">\n          <h1 className=\"loading-message\">Loadin' that sweet, sweet data...</h1>\n          <h4 className=\"loading-message-sub\">That means Survey Results</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"main-wrapper\">\n        {this.state.isMobile && (\n          <button\n            className=\"filters-toggle\"\n            onClick={() =>\n              this.setState({ showFilters: !this.state.showFilters })\n            }\n          >\n            {this.state.showFilters ? \"Hide\" : \"Filters\"}\n          </button>\n        )}\n\n        {this.state.showFilters && (\n          <Filters\n            applyFilter={this.applyFilter}\n            clearFilter={this.clearFilter}\n            innerHeight={this.state.innerHeight}\n            isColorBlind={this.state.isColorBlind}\n            questionsShowing={this.state.questionsShowing}\n            resetQuestionsShowing={this.resetQuestionsShowing}\n            selectedAnswers={this.state.answers}\n            toggleAnswer={this.toggleAnswerFilter}\n            updateColorBlind={() =>\n              this.setState({ isColorBlind: !this.state.isColorBlind })\n            }\n            updateQuestionsShowing={this.updateQuestionShowing}\n          />\n        )}\n\n        {this.state.answerCounts && (\n          <Results\n            answerCounts={this.state.answerCounts}\n            activeFilters={this.state.activeFilters}\n            computedResponsesLength={this.state.computedResponsesLength}\n            allResponsesCount={this.state.responses.length}\n            innerHeight={this.state.innerHeight}\n            isColorBlind={this.state.isColorBlind}\n            questionsShowing={this.state.questionsShowing}\n            updateFilterLive={this.updateFilterLive}\n          />\n        )}\n      </div>\n    );\n  }\n\n  applyFilter() {\n    this.setState({ filtering: true }, () => {\n      const { answers } = this.state;\n      const questionsWithFilters = this.getFilters(answers);\n\n      if (!questionsWithFilters.length) {\n        return this.setState({\n          activeFilters: [],\n          filtering: false,\n          answerCounts: this._calcAnswerQuantities(this.state\n            .responses as Survey.Response[]),\n          computedResponsesLength: (this.state.responses as Survey.Response[])\n            .length\n        });\n      }\n\n      const computedResponses = this.getFilteredResponses(\n        (this.state.responses as Survey.Response[]) || [],\n        questionsWithFilters\n      );\n      const answerCounts = this._calcAnswerQuantities(computedResponses);\n\n      this.setState({\n        activeFilters: questionsWithFilters,\n        answerCounts,\n        filtering: false,\n        computedResponsesLength: computedResponses.length\n      });\n    });\n  }\n\n  clearFilter() {\n    this.setState({\n      answers: {\n        ageRange: {},\n        characterGender: {},\n        class: {},\n        classComparison: {},\n        contentInterest: {},\n        expectedTimeTo60: {},\n        faction: {},\n        firstRetailExpansionPlayed: {},\n        hasActiveSub: {},\n        hasPlayedPrivateServer: {},\n        mostRecentExpansionPlayed: {},\n        prof60: {},\n        profLeveling: {},\n        race: {},\n        region: {},\n        role: {},\n        serverType: {},\n        dailyPlayTime: {},\n        willTakeTimeOffWork: {},\n        hasFoundGuild: {},\n        phaseMostExcitedFor: {}\n      }\n    });\n  }\n\n  getFilters(\n    answers: FilterTypes.SelectedAnswers\n  ): [keyof Survey.Response, Survey.AllAnswers[]][] {\n    return objectEntries(answers).reduce(\n      (accum, [questionKey, selectedAnswers]) => {\n        const filteredAnswers = objectEntries(selectedAnswers as {\n          [x: string]: boolean;\n        })\n          .filter(([__, isSelected]) => isSelected)\n          .map(([answer]) => answer);\n\n        if (filteredAnswers.length) {\n          // @ts-ignore\n          return accum.concat([[questionKey, filteredAnswers]]);\n        }\n\n        return accum;\n      },\n      []\n    );\n  }\n\n  getFilteredResponses(\n    responses: Survey.Response[],\n    filters: [keyof Survey.Response, Survey.AllAnswers[]][]\n  ) {\n    return responses.filter(response => {\n      return filters.every(([questionKey, selectedAnswers]) => {\n        return (selectedAnswers as string[]).some(selectedAnswer => {\n          if (\n            questionKey === \"contentInterest\" ||\n            questionKey === \"prof60\" ||\n            questionKey === \"profLeveling\"\n          ) {\n            // @ts-ignore\n            return response[questionKey].includes(selectedAnswer);\n          }\n\n          return response[questionKey] === selectedAnswer;\n        });\n      });\n    });\n  }\n\n  resetQuestionsShowing() {\n    this.setState({\n      questionsShowing: {\n        ageRange: true,\n        characterGender: true,\n        class: true,\n        classComparison: true,\n        contentInterest: true,\n        expectedTimeTo60: true,\n        faction: true,\n        firstRetailExpansionPlayed: true,\n        hasActiveSub: true,\n        hasPlayedPrivateServer: true,\n        mostRecentExpansionPlayed: true,\n        prof60: true,\n        profLeveling: true,\n        race: true,\n        region: true,\n        role: true,\n        serverType: true,\n        dailyPlayTime: true,\n        willTakeTimeOffWork: true,\n        hasFoundGuild: true,\n        phaseMostExcitedFor: true\n      }\n    });\n  }\n\n  toggleAnswerFilter(\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response,\n    callback?: () => void\n  ) {\n    const updatedSection = {\n      ...this.state.answers[type],\n      [answer]: !isSelected\n    };\n\n    this.setState({\n      answers: { ...this.state.answers, [type]: updatedSection }\n    }, () => {\n      if (callback) {\n        callback();\n      }\n    });\n  }\n\n  updateQuestionShowing(question: string) {\n    this.setState({\n      questionsShowing: {\n        ...this.state.questionsShowing,\n        [question]: !this.state.questionsShowing[\n          question as keyof FilterTypes.QuestionsShowing\n        ]\n      }\n    });\n  }\n\n  updateFilterLive(category: keyof Survey.Response, filter: string) {\n    this.toggleAnswerFilter(filter, true, category, () => this.applyFilter());\n  }\n}\n","import React, { Component } from \"react\";\nimport AppWrapper from \"./AppWrapper\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\"> */}\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n        {/* </header> */}\n        <AppWrapper />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}